events {
	worker_connections 4096;
}

env HOSTNAME;
env NODE_NAME;
env POD_NAME;
env POD_NAMESPACE;
env POD_IP;

http {
	default_type 'text/plain';
	client_max_body_size 20m;

    vhost_traffic_status_zone;
    vhost_traffic_status_filter on;
    vhost_traffic_status_filter_by_host on;

    limit_req_zone $server_port zone=global:50m rate=333r/s;  ##bucket limit

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    
	init_by_lua_block {
		local template = require("template")
		-- template syntax documented here:
		-- https://github.com/bungle/lua-resty-template/blob/master/README.md
		tmpl = template.compile([[


Hostname: {{os.getenv("HOSTNAME") or "N/A"}}

Pod Information:
{% if os.getenv("POD_NAME") then %}
	node name:	{{os.getenv("NODE_NAME") or "N/A"}}
	pod name:	{{os.getenv("POD_NAME") or "N/A"}}
	pod namespace:	{{os.getenv("POD_NAMESPACE") or "N/A"}}
	pod IP:	{{os.getenv("POD_IP") or "N/A"}}
{% else %}
	-no pod information available-
{% end %}

Server values:
	server_version=nginx: {{ngx.var.nginx_version}} - lua: {{ngx.config.ngx_lua_version}}

Request Information:
	client_address={{ngx.var.remote_addr}}
	method={{ngx.req.get_method()}}
	real path={{ngx.var.request_uri}}
	query={{ngx.var.query_string or ""}}
	request_version={{ngx.req.http_version()}}
	request_scheme={{ngx.var.scheme}}
	request_uri={{ngx.var.scheme.."://"..ngx.var.host..":"..ngx.var.server_port..ngx.var.request_uri}}

Request Headers:
{% for i, key in ipairs(keys) do %}
	{{key}}={{headers[key]}}
{% end %}

Request Body:
{{ngx.var.request_body or "	-no body in request-"}}
]])
	}

	server {
		listen 80 default_server reuseport;
		listen 443 default_server ssl reuseport;
		ssl_certificate /certs/certificate.crt;
		ssl_certificate_key /certs/privateKey.key;
		server_name _;

        

		location / {
            limit_req zone=global burst=10000;  ##bucket
			lua_need_request_body on;
			content_by_lua_block {
				ngx.header["Server"] = "echoserver"

				local headers = ngx.req.get_headers()
				local keys = {}
				for key, val in pairs(headers) do
					table.insert(keys, key)
				end
				table.sort(keys)

				ngx.say(tmpl({os=os, ngx=ngx, keys=keys, headers=headers}))
			}
		}
	}
    server {   # metric status
        listen       8088;
        server_name  localhost;

        location /status {
            vhost_traffic_status_display;
            vhost_traffic_status_display_format prometheus;
        }

    }
}